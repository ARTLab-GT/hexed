/*! \page contributing Contributing guidelines

When contributing to Hexed, please adhere to these guidelines.
Some are standard practice in software development,
which I feel the need to specify since most of the people who contribute to Hexed are not software engineers by training.
Others are meant to standardize what is otherwise a matter of personal preference.

\section contrib_general General procedures
Please do __not__ commit or push to the `master` branch.
The standard workflow should be the following:
-# Create a new branch.
-# Implement changes.
-# Open pull request.

After reviewing the pull request, the maintainer will merge it and delete the branch.
You are encouraged to create as many new branches as you like, for any reason,
even if they are just experiments you don't intend to merge.
However, if you are completely done with a branch, please delete it.
You are also encouraged to push frequently (at least once per work day)
-- productivity is maximized when everyone can see the latest version of everything.
Finally, development should be test-driven as much as possible,
granted the inherent difficulty of testing a computational physics solver.

\section contrib_pull Pull requests
A pull request will not be merged until it meets the following requirements:
- No merge conflicts.
- Must compile and run both in `Release` and in `Debug` mode with sanitizers.
- No unit test failures or sanitizer errors.
- No compiler warnings.

\section contrib_style Code style
Please adhere to the following style conventions whenever possible.

\subsection file_formatting File formatting
- File names must not contain whitespace or other characters that have meaning in shell commands.
- Source files must not contain the tab character. C++ code should be indented with 2 spaces
  and Python code should be indented with 4 spaces.
- Use blank lines sparingly.

\subsection Names
(of variables, functions, namespaces, classes, macros, etc. Anything in the code)
- Should contain words, abbreviations, and/or numbers separated by underscores (not camelCase, and not multiplewordswithoutspaces).
- Names of classes should begin with a capital letter. Otherwise, all letters should be lowercase.
- A name should be a description of the variable it refers to.
  It should not reference mathematical symbols or the sound of words.
  For example, resist the temptation to use `x` to refer to horizontal position.
  Acceptable alternatives might be `coord0`, or `position`.
- Maintain conventions in \ref conventions.
- When practical, avoid overly long names.
  Abbreviations are encouraged, especially in a local scope where there are fewer opportunities to confuse similar names.
- Some examples of names I do not approve of:
  - `eye` to refer to the identity matrix.
    References the pronunciation of the mathematical symbol, two levels removed from any descriptive meaning.
    I prefer the name `identity`.
  - `str2num` to mean "string to number".
    Just call it `str_to_num`. Distinguishing between "2" and "to" is worth 3 extra characters.
  - I have seen names longer than this sentence.
    Save some for the comments.

\subsection Exceptions
If the code encounters a fatal problem, it should throw an exception
(using the constructs of whatever language it is currently in) with a helpful error message.
The message should identify _what_ exactly was found to be wrong
so that someone capable of understanding the problem has a clue _where_ to start trying to figure out _why_.
In the interest of performance, some functions in the C++ API may produce segmentation faults, memory leaks, or undefined behavior
upon incorrect usage.
However, such incorrect usage should be caught and avoided by the Python API or any other frontend.
If an end user makes a mistake and obtains a segfault instead of an exception, I consider that a bug.
Some common things I would like to avoid in this code are:
- Don't just say something vague like "there was a problem" or give a numeric error code
  that the user then has to look up to get any information.
  Error messages should be as specific as possible.
  I'm thinking of the error messages in a certain operating system whose name ironically suggests transparency.
- Don't presume to guess why the problem occurred or give verbose suggestions about how to fix it.
  Exceptions generally occur because you failed to understand the situation,
  so your _a priori_ insight is probably a waste of space at best and actively misleading at worst.
  Just say what the exact, concrete problem was.

\see \ref error_types

\subsection Miscellaneous
- Avoid `using namespace`. The code is clearer when namespaces are referenced explicitly.
- _Everything_ in the library must be wrapped in the namespace \ref hexed to avoid creating naming conflicts for library users.
  - Macros, which do not respect namespaces, should be prefixed with `HEXED_`.
- Code should conform to the ISO C++ standard.
  For example, don't use variable-length arrays or the `constexpr` form of `std::pow`, which are non-conforming features of GCC.
- The default integral type should be `int`.
  For example, don't use `unsigned` for loop indices and array sizes unless there is a specific reason to.

*/
