/*! \page conventions Notation and conventions

This page defines non-standard notation and conventions
used in the theory and implementation of Hexed.
If the meaning of a number or variable is unclear or ambiguous, look here for guidance.
Also, please try to maintain these conventions when contributing to the code.

\section units Units and physical quantities
- Unless otherwise specified, all dimensional numbers are in the applicable SI units
  (i.e., derived from m, kg, s, K).
- Unless otherwise specified, all angles are radian.
- If an extensive thermodynamic quantity (e.g., mass, volume, energy, as opposed to an
  intensive quantity like temperature or pressure) is specified without a reference quantity, it
  means per unit volume. For example, "energy" specified without other context will be
  in units of \f$ J/m^3 \f$.
  - As a result, "mass" and "density" are synonymous. In fact, prefer "mass" so that
    all the conserved variables (momentum, mass, energy) are consistently extensive.
- Stagnation quantities shall be referred to as such.
  The word "total" shall not be used to indicate stagnation quantities.
- The flow state vector (often simply referred to as `state`) consists of the
  conserved variables.
  It has components [momentum, mass, total energy]. E.g., in 3D that is
  [momentum0 (\f$x\f$-direction), momentum1 (\f$y\f$-direction), momentum2 (\f$z\f$-direction), mass, total energy].
  "Total energy" means thermodynamic internal energy + kinetic energy.
  - This is different from most codes, which use the order (mass, momentum, energy).
    The order for Hexed was chosen because it groups the vector and scalar quantities together
    and because the \f$i\f$th component of the state vector
    is equal to the \f$i\f$th component of momentum.
    The latter makes the code for certain formulae cleaner.

\section Terminology
Hexed uses some terms that are non-standard, or at least not completely universal.
They are defined as follows:
- "kernel": A performance-critical function performs some of the core numerical operations.
- The "row size" of a polynomial basis is its degree + 1 (i.e., the number of rows of quadrature
  points in each dimension, which equals the number of coefficients in the 1D case).
  It is usually more convenient to talk about the row size than the degree,
  as it is more directly related to the actual code implementation.
  The row size is not to be confused with the number of quadrature points, which depends on
  the dimensionality. E.g., a 4th degree basis in 3 dimensions has row size 5
  and 125 quadrature points.
- "node": An interpolation node for a basis of Lagrange (interpolating) polynomials.
  These tend to coincide with the quadrature points for.
- "vertex": A single point shared by a collection of elements.
  Not to be confused with "node".

\section Abbreviations
Some common abbreviations are defined as follows, in alphabetical order.
- `con`: connection
- `def`: deformed
- `dim`: dimension
  - `i_dim` specifically serves to identify which of the coordinate axes is referenced
    in some operation.
- `elem`: mesh element
- `ener`: energy
- `enth`: enthalpy
- `heat_rat`: ratio of heat capacities. Often denoted "gamma" in thermodynamics.
- `i_`: index of ...
  - If this is an index in a nested loop, the inside loops may use `j_` and `k_`.
- `n_`: number of ...
- `pos`: position
- `pres`: pressure
- `qpoint`: "quadrature point"
- `_sq`: ... squared
- `stag`: stagnation
- `veloc`: velocity
- `vert`: vertex

\section storage_order Storage order
Although C++ arrays and [Eigen matrices](https://eigen.tuxfamily.org/dox/group__TutorialMatrixClass.html)
can be useful for storing multidimensional array data,
it is often necessary to access data via a pointer and a flat index.
In that case, observe the following conventions.
- To define the layout of data in contiguous memory in the code,
  row-major array indexing syntax shall be used.
  For example, the line
  ~~~{.cpp}
  double* some_data; // Layout: [i_some_thing][i_other_thing]
  ~~~
  indicates that `some_data` points to a block of doubles of size
  `n_some_thing*n_other_thing`, and that access to this array should look like
  `some_data[i_some_thing*n_other_thing + i_other_thing]`.
- Data that is associated with locations in physical space, including vertices
  and quadrature points, is stored as an array where each array index corresponds
  to one physical coordinate. That is, the first index corresponds to the \f$x\f$-coordinate,
  the second to the \f$y\f$-coordinate, etc.
  Thus, when specifying memory layout, `[i_qpoint]` means the following, depending on the dimensionality:
  - 1D: `[i_row]`
  - 2D: `[i_row][j_row]`
  - 3D: `[i_row][j_row][k_row]`

  where `0 <= i_row < row_size`. For example, for a 3D Cartesian element, if you are
  looking at the position of the `i_qpoint`th quadrature point, then `i_qpoint += 1` will
  change only the \f$z\f$-coordinate, `i_qpoint += row_size` will change only \f$y\f$, and
  `i_qpoint += row_size*row_size` will change only \f$x\f$.
- Be careful of the fact that C++ storage order is row-major, whereas Eigen matrices
  are column-major by default.

*/
