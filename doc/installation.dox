/*! \page installation Installation

\section quick Quick Start
If look at these instructions and don't know what I'm talking about, skip to \ref detailed
-# Ensure that the following mandatory dependencies are installed (all Python packages must be available for Python3):
   - [Eigen](https://eigen.tuxfamily.org/)
   - [numpy](https://numpy.org/)
   - [scipy](https://scipy.org/)
   - [sympy](https://www.sympy.org/en/index.html)
-# You are recommended to also install the following dependencies which are required for some optional features:
   - [Tecplot](https://www.tecplot.com/)/[TecIO](https://www.tecplot.com/products/tecio-library/) (required for visualization)
   - [Catch2](https://github.com/catchorg/Catch2) (required for unit testing)
   - [pytecplot](https://www.tecplot.com/docs/pytecplot/) (required by the
     \ref postproc "Python postprocessing script" -- you can probably do without if you want)
-# Create and navigate to a build directory (git will ignore names that start with `build`).
-# Use `ccmake` to configure build options.
   This project has been configured to show you the available options and their defaults specifically with the `ccmake` interface for CMake.
   - The default options should be appropriate for a release build.
   - Note that `CMAKE_INSTALL_PREFIX` defaults to `~/.local` instead of `/usr/local`,
     so that it can be installed on the lab machines without root access.
-# Ensure that your system can find Tecplot/TecIO header and library files.
   You may need to edit `CPLUS_INCLUDE_PATH`, `LIBRARY_PATH`, and `LD_LIBRARY_PATH`.
   Much to my disappointment, TecIO does not cooperate with CMake, so this must be setup manually.
-# `make -j install`
-# Hexed is now ready to use. To verify the success of the build, execute the following:
   - `test/unit` to run the unit tests.
   - `demo/demo2d`. This will run a very simple toy problem and output Tecplot visualization files.
     Open these files in Tecplot and run the macro script `format.mcr` in the Hexed build directory to create a readable visualization.

\section detailed Detailed instructions
These are some very basic, step-by-step instructions, since Hexed is meant for aerospace engineers, who often aren't programmers.
These instructions will work on an ARTLab machine.
If you're working on a different machine, hopefully they will provide some useful troubleshooting hints,
but you probably won't be able to just blindly follow the instructions.
The instructions assume you are familiar with basic directory and file management in Linux.
If you are not, consider asking for help.
If you have any trouble following these instructions,
please let \ref me know so that this documentation can be improved.

\subsection configure Step 1: configure environment
When you compile and install programs that rely on other programs,
your system uses so-called *environment variables* to remember where all the different programs are kept.
It is common to install programs you compile in `/usr/local`.
However, this requires superuser privileges, which we do not have on the lab machines (I know, I know).
My solution is to install things in `~/.local` instead.
However, this requires us to edit an environment variable so that the system knows what we're doing.
Plus, we need to edit a *whole bunch* of environment variables to accommodate Tecplot being a little... *unique*.
- To start with, type `cd` to make sure you're in your home directory.
- your `~/.local` directory should contain subdirectories `bin`, `include`, `lib`, and `share`.
  If these directories don't exist, create them.
- You can change environment variables by editing the file `.bashrc`.
  First, it is recommended that you make a backup copy:
  ~~~{.sh}
  cp .bashrc .bashrc_backup
  ~~~
  - Now edit `.bashrc` and add the following lines at the end:
  ~~~{.sh}
  TECPLOT_DIR=/opt/tecplot/360ex_2020r2
  TECPLOT_LIB_PATH=$TECPLOT_DIR/bin/
  export CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH:$TECPLOT_DIR/include/:~/.local/include/
  export LIBRARY_PATH=$LIBRARY_PATH:$TECPLOT_LIB_PATH:~/.local/lib
  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$TECPLOT_LIB_PATH:~/.local/lib
  export PYTHONPATH=$PYTHONPATH:~/.local/lib
  export PATH=$PATH:~/.local/bin
  ~~~
  If you are not on an ARTLAB machine, ensure that you have Tecplot installed and change `TECIO_DIR` to match your Tecplot installation.
- Close and reopen the terminal.
- You also need somewhere to put all the code I'm about to make you download, as opposed to dumping it in your home directory.
  Thus, do
  ~~~{.sh}
  mkdir codes
  ~~~

\subsection install_python Step 2: install Python libraries
Hexed uses Python scripts for some small tasks during the build process and output post-processing and requires
a few 3rd-party libraries.
- Install the numerical computing libraries numpy and scipy (althought you likely have them already):
  - `pip3 install numpy`
  - `pip3 install scipy`
- Install the plotting library matplotlib
  - `pip3 install matplotlib`
- Install the symbolic computation library sympy (used to generate quadrature rules):
  - `pip3 install sympy`
- Install PyTecplot (Tecplot's Python API):
  - `pip3 install pytecplot`
  - If this doesn't work, don't worry. You just won't be able to run the \ref postproc "Python postprocessing script",
    which you don't strictly need to do.

\subsection install_eigen Step 3: install Eigen
- Download the Eigen [source code](http://eigen.tuxfamily.org/index.php?title=Main_Page#Download) (latest stable release).
- Unpack the Eigen source in `~/codes`. `~/codes` should now contain a directory named something like `eigen-X.X.X`, depending on the
  current version number.
- `cd eigen-X.X.X` (replace "X"s with appropriate numbers).
- `cp -r Eigen/ ~/.local/include/`

\subsection install_occt Step 4: install OpenCASCADE Technology
OpenCASCADE Technology is an open source CAD Engine which Hexed uses to read and manipulate geometry from standard CAD file formats.
- Obtain the source code by one of the following approaches:
  - Visit the [download page](https://dev.opencascade.org/release) and download the latest release.
    Before you can download the source, you will be prompted to make an account.
  - If you're an ARTLab member, just ask \ref me for a copy.
- `cd ~/codes`
- `tar -xzf ~/Downloads/opencascade-7.7.0.tgz`
- `cd opencascade-7.7.0`
- `mkir build`
- `cd build`
- `cmake -D INSTALL_DIR=~/.local -D BUILD_MODULE_Draw=OFF ..`
  - This will disable the "Draw" module, which creates a basic example CAD program with OCCT.
    We don't need that for our purposes, and I've had trouble compiling it on the ARTLab machines,
    but if you want to enable it and can get it to compile, it certainly won't cause any problems.
- `make install` (may take a while)

\subsection install_hexed Step 5: compile and install Hexed
- If you haven't already,
  [add an SSH key](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account)
  to your GitHub account.
- `cd ~/codes`
- `git clone git@github.gatech.edu:ARTLab/hexed.git`
- `cd hexed`
- `mkdir build_Release`
- `cd build_Release`
- `cmake ../` (if you want to edit build options, you can instead use `ccmake` as described \ref ccmake "below").
- `make -j install`

\subsection verify Step 6: verify success
-  You should still be in the build directory.
- `demo/demo2d`
  - This runs a simple demonstration simulation. It should create a bunch of `.szplt` files.
- Start Tecplot and open all the `.szplt` files.
- Select "Play Macro/Script..." in the "Scripting" menu.
- Select the file `format.mcr`.
- You should now see a contour plot of Mach number for an isentropic vortex.
  If you advance the time slider, you should see the vortex travel out one side of the domain and back in the other.
- If you want, you can also run `demo/demo3d`.

\subsection dev_build Development build
The above instructions are sufficient if you just want to run simulations.
However, if you're going to be doing any development of Hexed, I recommend you perform the following additional steps.

\subsubsection install_catch2 Step 1: install Catch2
Hexed uses Catch2 is for unit testing. Install Catch2 so that you can compile the unit tests.
- Visit the Catch2 [Releases](https://github.com/catchorg/Catch2/releases) page and download the source code
  for the latest one (do not clone the `devel` branch from the github repo, as that is not a stable release).
- Extract (e.g., unzip) the source code and place it in `~/codes`. `~/codes` should now contain a directory named something like `Catch2-2.XX.X`,
  except instead of "X"s there will be a version number.
- `cd ~/codes/Catch2-2.XX.X` (replace the "X"s to match whatever the actual directory name is).
- `cmake -Bbuild -H. -DBUILD_TESTING=OFF -DCMAKE_INSTALL_PREFIX=~/.local`
- `cmake --build build/ --target install`

\subsubsection build_tests Step 2: build unit tests
Now you need to update your Hexed build to include the unit tests, as follows:
- `cd ~/codes/hexed/build_Release`
- `ccmake ..`
  - This will open the [CMake curses interface](https://cmake.org/cmake/help/latest/manual/ccmake.1.html),
    which is a sort-of-GUI for [CMake](https://cmake.org/).
    This allows you to choose some options for how to build Hexed.
    Personally, I always use `ccmake` when I'm building a CMake project,
    since it lets me see what options are available and modify any that seem relevant.
  - You should see `EMPTY_CACHE` and no error messages.
- Press `c`. You should now see a list of options. The default options are fine for a pure user,
  but if you want to do any development there are a few you should change.
  To edit options, use the arrow keys to move the cursor and Enter to edit the option under the cursor.
  - Set the option `build_tests` to `ON`.
- Press `c` again.
- Press `g` to generate. The GUI should exit (sometimes you have to hit `c` several times before it will let you exit with `g`).
  - If something goes wrong and you can't get `g` to work, you can abort with `q`.
- `make -j` (you only need `install` the first time you compile or if you've changed any of the executable scripts).
- The code is now compiled. You can run the unit tests with the command `test/unit` (executed from the build directory, still).
- You should see "All tests passed".

\subsubsection Step 3: build in debug mode
So far, we've only compiled Hexed in Release mode, which is designed to run as fast as possible at the expense of ease of debugging.
That's what you want when you're running simulations, but if you're in the process of implementing and debugging new features,
you would probably prefer to be able to use debugging tools like [GDB](https://www.sourceware.org/gdb/) and the
[sanitizers](https://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html).
So, we will create an new build directory where we compile in Debug mode.
- `cd ~/codes/hexed`
- `mkdir build_Debug`
- `ccmake ..`. \anchor ccmake
  - this time, set `CMAKE_BUILD_TYPE` to `Debug` ("Enter" toggles between `Release` and `Debug`),
    `build_tests` to `ON`, and `sanitize` to `ON`.
  - `c` as many times as you need and then `g`.
- `make -j` (**don't** add `install`, since you still want to be running simulations with your nice and fast Release mode).
- `test/unit`. Again, you should see "All tests passed".
   However, now if you were to, for example, write to an array out of bounds, you will get an error message with the line number of the problem
   instead of just a segfault.

*/
