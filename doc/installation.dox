/*! \page installation Installation

Below are instructions to install Hexed by building from the source.
Hexed currently only supports GNU/Linux and GCC compiler,
although you may be able to coerce it to work in other environments.
Precompiled binaries and support for other operating systems and compilers are planned in future releases.

\section quick Quick Start
If look at these instructions and don't know what I'm talking about, skip to \ref detailed
-# Ensure that the following mandatory dependencies are installed (all Python packages must be installed for Python3):
   - [Eigen](https://eigen.tuxfamily.org/)
   - [numpy](https://numpy.org/)
   - [scipy](https://scipy.org/)
   - [matplotlib](https://matplotlib.org/)
   - [sympy](https://www.sympy.org/en/index.html)
   - [GitPython](https://gitpython.readthedocs.io/en/stable/)
-# You are recommended to also install the following dependencies which are required for some optional features:
   - One of the following visualization systems:
     - [ParaView](https://www.paraview.org/) and [XDMF](https://www.xdmf.org/index.php/Main_Page)
     - [Tecplot](https://www.tecplot.com/) and [TecIO](https://www.tecplot.com/products/tecio-library/)
   - [OpenCASCADE Technology](https://dev.opencascade.org/doc/overview/html/index.html): required for CAD geometry import
   - [Catch2](https://github.com/catchorg/Catch2): required for unit testing
-# Create and navigate to a build directory (git will ignore names that start with `build`).
-# Use \ref ccmake to configure build options.
   This project has been configured to show you the available options and their defaults specifically with the `ccmake` interface for CMake.
   - Be sure to set `CMAKE_INSTALL_PREFIX`.
   - `PYTHON_INSTALL_PREFIX` should be set to somewhere in your Python module search path.
     It will try to automatically detect your [user site-packages](https://docs.python.org/3/library/site.html#cmdoption-site-user-site) directory,
     but you might have to manually override it.
-# `make -j install`
-# Hexed is now ready to use. To verify the success of the build, execute the following:
   - `test/unit` to run the unit tests.
   - `cd ../samples/naca0012; hexecute run.hil` to run the [NACA 0012 sample case](https://github.com/ARTLab-GT/hexed/blob/v0.1.1/samples/naca0012/run.hil).

\section detailed Detailed instructions
Since Hexed is meant for aerospace engineers, who often aren't programmers, this section provides a detailed tutorial on how to build the source.
If you don't want to use XDMF/Paraview for visualization, you can skip steps 4 through 7.
These instructions will definitely work on an ARTLab machine.
They will hopefully also work on any other GNU/Linux system, but you may have to adapt some of the details.
If you have any trouble following these instructions,
please let \me know so that this documentation can be improved.

\subsection configure Step 1: Set up installation directory
In a GNU/Linux system, by convention programs are typically installed in `/usr/local`,
so when you try to execute them, the system knows where to find them.
However, this requires you to have superuser privileges, which, on the ARTLab machines for example, we do not.
So, you need an alternative place to install things that the system knows about.
If you already have an installation directory that works for you, or you don't mind installing things in `/usr/local`, you can skipt this step.
Otherwise, you can do the following to set up an installation directory called `~/local`.
Feel free to change the name/location if you like.
- To start with, create the directories `~/local`, `~/local/bin`, `~/local/include`, `~/local/lib`, and `~/local/share`.
- To tell your system to look for executable programs here,
  you need to set some environment variables by editing the file `.bashrc`.
  First, it is recommended that you make a backup copy:
  ~~~{.sh}
  cp .bashrc .bashrc_backup
  ~~~
  - Now edit `.bashrc` and add the following lines at the end:
  ~~~{.sh}
  export CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH:~/local/include/
  export LIBRARY_PATH=$LIBRARY_PATH:~/local/lib
  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/local/lib
  export PYTHONPATH=$PYTHONPATH:~/local/lib
  export PATH=$PATH:~/local/bin
  ~~~
- Close and reopen the terminal. This will allow changes to take effect.

You also need somewhere to put all the code I'm about to make you download, as opposed to dumping it in your home directory.
Personally, I recommend making a directory called `~/codes`, but of course you are free to use any directory you like.

\subsection install_python Step 2: install Python libraries
Hexed uses Python scripts for some small tasks during the build process and output post-processing and requires
a few 3rd-party libraries.
- Install the numerical computing libraries numpy and scipy (althought you likely have them already):
  - `pip3 install numpy`
  - `pip3 install scipy`
- Install the plotting library matplotlib (used for residual plotting, among other things)
  - `pip3 install matplotlib`
- Install the symbolic computation library sympy (used to generate quadrature rules):
  - `pip3 install sympy`

\subsection install_eigen Step 3: install Eigen
- Download the %Eigen [source code](http://eigen.tuxfamily.org/index.php?title=Main_Page#Download) (latest stable release).
- Unpack the %Eigen source in `~/codes`. `~/codes` should now contain a directory named something like `eigen-X.X.X`, depending on the
  current version number.
- `cd eigen-X.X.X` (replace "X"s with appropriate numbers).
- `cp -r Eigen/ ~/local/include/`
  - Obviously, if you decided to make your install path somewher other than `~/local`, substitute that instead.

\subsection install_hdf5 Step 4: install HDF5
\ref install_xdmf "XDMF" uses the [Hierarchical Data Format, version 5](https://www.hdfgroup.org/solutions/hdf5/) to store data.
The following steps can be used to install the HDF5 I/O library.
- Download the [source code](https://www.hdfgroup.org/downloads/hdf5/source-code/) (latest release) and unpack it in `~/codes`.
  - Ignore the installation instructions that come with it---they are rather cursed.
- `cd hdf5-X.XX.X`
- `mkdir build`
- `cd build`
- `cmake -D CMAKE_INSTALL_PREFIX=~/local`
- `make -j install`

\subsection install_boost Step 5: install Boost headers
\ref install_xdmf "XDMF" uses header files from Boost.
To install these:
- Go to the [Boost website](https://www.boost.org/) and download the latest release.
- Unpack it in `~/codes`.
- Copy the header files: `cp -r boost_X_XX_X/boost ~/local/include`
  - __or__ symlink them: `ln -s $(pwd)/boost_X_XX_X/boost ~/local/include`

\subsection install_xml Step 6: install libxml2
\ref install_xdmf "XDMF" uses [XML](https://github.com/GNOME/libxml2).
To install:
- Go to [Release page](https://download.gnome.org/sources/libxml2/) and download latest.
- Unpack  in `~/codes`
- `cd libxml2-X.X.X`
- `./configure --prefix=$(echo ~)/local --with-python=no`
  - The `$(echo ~)` will expand to your home directory (e.g. for me, `/home/mcsp3`), since this script doesn't understand paths that use `~`.
- `make install`

\subsection install_xdmf Step 7: install XDMF
Hexed uses the [Extensible Data Model and Format](https://www.xdmf.org/index.php/Main_Page) to store visualization data.
Use the following steps to install the XDMF library:
- Clone the git repo: `git clone https://gitlab.kitware.com/xdmf/xdmf.git`
- `cd xdmf`
- `mkdir build`
- `cd build`
- `export XDMF_INSTALL_DIR=~/local`
- `cmake .. -DCMAKE_INSTALL_PREFIX=${XDMF_INSTALL_DIR} -DBUILD_SHARED_LIBS=1 -Wno-dev`
- `make install`

\subsection install_occt Step 8: install OpenCASCADE Technology
OpenCASCADE Technology is an open source CAD Engine which Hexed uses to read and manipulate geometry from standard CAD file formats.
- Obtain the source code by one of the following approaches:
  - Visit the [download page](https://dev.opencascade.org/release) and download the latest release.
    Before you can download the source, you will be prompted to make an account.
  - If you're an ARTLab member, just ask \me for a copy.
- `cd ~/codes`
- `tar -xzf ~/Downloads/opencascade-7.7.0.tgz`
- `cd opencascade-7.7.0`
- `mkir build`
- `cd build`
- `cmake -D INSTALL_DIR=~/local -D BUILD_MODULE_Draw=OFF -D USE_FREETYPE=OFF ..`
  - This will disable the "Draw" module, which creates a basic example CAD program with OCCT.
    We don't need that for our purposes, and I've had trouble compiling it on the ARTLab machines,
    but if you want to enable it and can get it to compile, it certainly won't cause any problems.
- `make install` (may take a while). As a warning, I've maxed out my RAM trying to speed it up with the `-j` option.

\subsection install_hexed Step 9: compile and install Hexed
- `cd ~/codes`
- Obtain the Hexed source code.
  - The simplest way to do this is by visiting the [releases](https://github.com/ARTLab-GT/hexed/releases) page,
    downloading the latest one, and unpacking it in `~/codes`.
  - However, if you want to make changes to the code or keep up to date with new releases, you should clone the GitHub repository:
    `git clone git@github.com:ARTLab-GT/hexed.git`
    - This may require you to
      [add an SSH key](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account)
      to your GitHub account, if you haven't already.
  - You will, at this point, be on the `main` branch, which is the latest in-development version.
    To switch to a stable release, you can do something like `git checkout v0.1.1 -b v0.1.1_branch`.
- `cd hexed`
- `mkdir build_Release`
- `cd build_Release`
- `ccmake ..` \anchor ccmake
  This will open the [CMake curses interface](https://cmake.org/cmake/help/latest/manual/ccmake.1.html),
  which is a sort-of-GUI for [CMake](https://cmake.org/).
  This allows you to choose some options for how to build Hexed.
  Personally, I always use `ccmake` when I'm building a CMake project,
  since it lets me see what options are available and modify any that seem relevant.
- Press `c`.
  - You might see some nonsense warnings about "Argument not separated from the preceding token by whitespace".
    This is not a real problem, just some sloppiness we inherited from XDMF,
    but if it bothers you I have a \ref xdmf_problems "fix" for it.
    You should be able to just exit the warning screen by pressing `e`.
  - If you see other warnings/errors besides the above, you might have a real problem to fix.
- You should now see a list of options.
  To edit options, use the arrow keys or [hjkl](https://vimdoc.sourceforge.net/htmldoc/usr_02.html#hjkl)
  to move the cursor and Enter to edit the option under the cursor.
  - Change `CMAKE_INSTALL_PREFIX` to `~/local` (or wherever you want to install binaries).
  - If you want to use Tecplot, change `use_tecplot` to `ON`.
    After you hit `c` the first time, you will have to edit the variable `TECPLOT_DIR` to point to wherever you installed Tecplot.
  - If you __don't__ want to use XDMF, change `use_xdmf` to `OFF`.
  - Otherwise, the default options should be fine.
- Press `c` again.
- Press `g` to generate. The GUI should exit (sometimes you have to hit `c` several times before it will let you exit with `g`).
  - If something goes wrong and you can't get `g` to work, you can abort with `q`.
- `make -j install`

\subsection verify Step 10: verify success
Hexed should now be ready to use.
To verify that it actually works, try running one of the sample cases:
-  You should still be in the build directory.
- `cd ../samples/naca0012/`
- `hexecute run.hil`
- You should see it print out a convergence history and then a performance summary.
  It should create a few `.xmf` files which you can open in ParaView to see the flowfield.
  The entire simulation should take a bit less than a minute.

\subsection dev_build Development build
The above instructions are sufficient if you just want to run simulations.
However, if you're going to be doing any development of Hexed, I recommend you perform the following additional steps.

\subsubsection additional_python Step 1: Install additional python packages
- Install GitPython (used by benchmarking script):
  - `pip3 install GitPython`

\subsubsection install_catch2 Step 2: install Catch2
Hexed uses Catch2 is for unit testing. Install Catch2 so that you can compile the unit tests.
- Visit the Catch2 [Releases](https://github.com/catchorg/Catch2/releases) page and download the latest one (select "source code (tar.gz)").
  Do not clone the `devel` branch from the github repo, as that is not a stable release.
- Extract (e.g., unzip) the source code and place it in `~/codes`. `~/codes` should now contain a directory named something like `Catch2-2.XX.X`,
  except instead of "X"s there will be a version number.
- `cd ~/codes/Catch2-2.XX.X` (replace the "X"s to match whatever the actual directory name is).
- `cmake -Bbuild -H. -DBUILD_TESTING=OFF -DCMAKE_INSTALL_PREFIX=~/local`
- `cmake --build build/ --target install`

\subsubsection build_tests Step 3: build unit tests
Now you need to update your Hexed build to include the unit tests, as follows:
- `cd ~/codes/hexed/build_Release`
- `ccmake ..`
  - Set the option `build_tests` to `ON`.
- `make -j install`
- The code is now compiled. You can run the unit tests with the command `test/unit` (executed from the build directory, still).
- You should see "All tests passed".

\subsubsection build_debug Step 4: build in debug mode
So far, we've only compiled Hexed in Release mode, which is designed to run as fast as possible at the expense of ease of debugging.
That's what you want when you're running simulations, but if you're in the process of implementing and debugging new features,
you would probably prefer to be able to use debugging tools like [GDB](https://www.sourceware.org/gdb/) and the
[sanitizers](https://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html).
So, we will create a new build directory where we compile in Debug mode.
- `cd ~/codes/hexed`
- `mkdir build_Debug`
- `ccmake ..`
  - this time, set `CMAKE_BUILD_TYPE` to `Debug` ("Enter" toggles between `Release` and `Debug`),
    `build_tests` to `ON`, and `sanitize` to `ON`.
  - `c` as many times as you need and then `g`.
- `make -j` (__don't__ add `install`, since you still want to be running simulations with your nice and fast Release mode).
- `test/unit` This may take a while.
   Again, you should see "All tests passed".
   However, now if you were to, for example, write to an array out of bounds, you will get an error message with the line number of the problem
   instead of just a segfault.

\section Troubleshooting
\subsection xdmf_problems XDMF problems
When compiling XDMF, if you get the compiler error `conflicting declaration ‘typedef int hid_t’`, try:
- `vi ../core/XdmfHDF5Controller.hpp`.
- Add `include <stdint.h>` after line 29
- On line 37 replace `typedef int hid_t` with `typedef int64_t hid_t`.

When building Hexed, you might get a CMake warning that looks something like:
~~~{.unparsed}
CMake Warning (dev) at /home/micaiah/.local/lib/cmake/Xdmf/XdmfConfig.cmake:87:
  Syntax Warning in cmake code at column 42

  Argument not separated from preceding token by whitespace.
Call Stack (most recent call first):
  CMakeLists.txt:136 (find_package)
This warning is for project developers.  Use -Wno-dev to suppress it.
~~~
(probably followed by many similar warnings).
This appears to be because the XDMF developers forgot to escape some quotes in their CMake scripts.
You can probably just ignore these errors (at least, this works for me).
However, if you want to silence the warnings, or if you're afraid this might be the cause of some other problems you're having,
you can fix it with a find/replace command in vim: 
- `vi /your/install/path/lib/cmake/Xdmf/XdmfConfig.cmake`
- \verbatim :%s/""\(.\{-}\)"/"\\"\1\\" \endverbatim
  This changes, for instance, `""this is supposed to be in nested quotes" this is not"` to `"\"this is supposed to be in nested quotes\\" this is not"`.
\if false
If you're reading the .dox file directly, note that the double backslash in the example text above will render as a single backslash (the first one escapes the second).
\endif

*/
