/*! \page running Running Hexed

\anchor hexecute
Technically, Hexed is really two things.
It is a C++ library, and it is an executable program.
If you want to extend the functionality of Hexed or use it as a backend and develop your own UI,
you should link with the C++ library `libhexed.so`
(use CMake to import the package `hexed`, and you will have access to everything in the namespace \ref hexed).
However, for most use cases, the executable should be sufficient.
To distinguish it from the library and namespace, the command to _execute hexed_ is `hexecute` (sorry for my terrible sense of humor).
It supports a text-based interface in the \ref hil.

A good basic example is the oblique shock case located in [samples/oblique_shock](https://github.gatech.edu/ARTLab/hexed/tree/main/samples/oblique_shock).
In this directory, you should see two files---`run.hil` is the input script (name and extension are arbitrary),
and `geom.csv` is a CSV file containing coordinates for a wedge geometry (see \ref add_geom for more information).
To run this case, just type `hexecute run.hil`.
You should see text output that looks something like:
~~~{.unparsed}
Commencing simulation with Hexed version 0.0.0 (commit 18bf3ffe9437ba2d7fd8df5802847ef9833f7c6e) at 2023-11-13 20:54:33 UTC (1699908873 Unix Time).
geometry-based refinement sweep 0... done
initialization complete with 953 elements

     iteration, normalized_residual, av_advection_residual, av_diffusion_residual,      flow_time,      time_step
              1,      1.00000000e+00,        8.73715941e-02,        3.84209209e-01,  1.00000000e+01,  1.00000000e+00
            100,      2.75139302e-01,        2.46612049e-04,        6.48590923e-02,  1.00000000e+03,  1.00000000e+00
            200,      1.05065839e-01,        1.24743428e-04,        2.24627172e-02,  2.00000000e+03,  1.00000000e+00
            300,      7.61332903e-02,        1.20518633e-04,        1.47022963e-02,  3.00000000e+03,  1.00000000e+00
            400,      4.41623811e-02,        1.16214896e-04,        1.18778389e-02,  4.00000000e+03,  1.00000000e+00
            500,      2.11077060e-02,        9.62806727e-05,        8.90772816e-03,  5.00000000e+03,  1.00000000e+00
            600,      1.02738416e-02,        7.44614560e-05,        8.37431842e-03,  6.00000000e+03,  1.00000000e+00
            700,      5.57505518e-03,        5.60666131e-05,        7.72173680e-03,  7.00000000e+03,  1.00000000e+00
            800,      3.87909707e-03,        4.44539635e-05,        7.07799758e-03,  8.00000000e+03,  1.00000000e+00
            900,      3.13039064e-03,        3.83886446e-05,        6.76125902e-03,  9.00000000e+03,  1.00000000e+00
           1000,      2.37059905e-03,        3.32827934e-05,        6.37970546e-03,  1.00000000e+04,  1.00000000e+00
visualizing...done
           1100,      1.60506506e-03,        2.70831254e-05,        6.30975624e-03,  1.10000000e+04,  1.00000000e+00
           1200,      1.09168927e-03,        2.15065423e-05,        5.54286603e-03,  1.20000000e+04,  1.00000000e+00
           1300,      6.69938098e-04,        1.66146135e-05,        5.45839925e-03,  1.30000000e+04,  1.00000000e+00
           1400,      4.34087287e-04,        1.29743536e-05,        4.82102884e-03,  1.40000000e+04,  1.00000000e+00
           1500,      2.74739067e-04,        1.01187926e-05,        4.50950705e-03,  1.50000000e+04,  1.00000000e+00
~~~
... etc.
The `iteration` column tells you what iteration you're on (note that it doesn't print output on every iteration)
and the `normalized_residual` column tells you the \f$ L_2 \f$ norm residual of the Navier-Stokes equations,
normalized by the value after the first iteration.
The `av_advection_residual` and `av_diffusion_residual` tell you the residual of the auxiliary advection and diffusion PDEs
used to determine the artificial viscosity coefficient, which will be 0 if you run a simulation without artificial viscosity.
If all three of these residuals vanish, the simulation has reached iterative convergence.
The `flow_time` and `time_step` variables are meaningless in this case because local time stepping is used,
but for a simulation with global time stepping their meaning should be self-explanatory.
As soon as you start the solver, a directory called `hexed_out` will be created.
In this directory will be a copy of the input file as well as a file `output.txt` with a copy of the command line output.
Also, each time you see `visualizing...done` in the command line output,
the solver will have written a new set of `.h5` and `.xmf` files to this directory.
You can view these files in Paraview by opening the `.xmf` (not `.h5`) files and selecting "XDMF Reader T" as the reader.
Finally, the `hexed_out` directory will also contain an empty `runtime_cmd.hil` \anchor runtime_cmd.hil.
Every time the solver prints output, it will execute the contents of this file as \ref hil "HIL" code and then overwrite it again with an empty file.
Thus by writing HIL code to this file you can control the solver while it is running.
I frequently use this to change the \ref done "termination condition" or the \ref max_safety "CFL constraint".
When the simulation is completed, you should see something like:
~~~{.unparsed}
           7300,      1.08631818e-08,        1.94536395e-08,        2.73729806e-03,  7.30000000e+04,  1.00000000e+00
           7400,      1.00613069e-08,        1.87430629e-08,        2.73805038e-03,  7.40000000e+04,  1.00000000e+00
           7500,      9.32060583e-09,        1.80694404e-08,        2.73879871e-03,  7.50000000e+04,  1.00000000e+00
simulation complete
wall clock time = 153.157s = 2.55261min = 0.0425436hr

performance summary:
7147500 (element*iteration)s completed in 142.858 s at 1.99872e-05 s / (element*iteration).
    boundary conditions: 19500000 (boundary connection)*(time integration stage)s completed in 5.59078 s at 2.86707e-07 s / (boundary connection)*(time integration stage).
    cartesian: 6645000 (element*iteration)s completed in 63.3012 s at 9.52613e-06 s / (element*iteration).
        compute time step: 66450000 (element*iteration)s completed in 8.47426 s at 1.27528e-07 s / (element*iteration).
        local: 132900000 (element*(time integration stage))s completed in 39.7748 s at 2.99284e-07 s / (element*(time integration stage)).
        neighbor: 392175000 (connection*(time integration stage))s completed in 9.4979 s at 2.42185e-08 s / (connection*(time integration stage)).
        reconcile LDG flux: 66450000 (element*(time integration stage))s completed in 5.52692 s at 8.31741e-08 s / (element*(time integration stage)).
    check admis.: 142950000 (element*iteration)s completed in 5.15453 s at 3.60583e-08 s / (element*iteration).
    deformed: 502500 (element*iteration)s completed in 7.73355 s at 1.53901e-05 s / (element*iteration).
        compute time step: 5025000 (element*iteration)s completed in 0.837211 s at 1.66609e-07 s / (element*iteration).
        local: 10050000 (element*(time integration stage))s completed in 4.23641 s at 4.21533e-07 s / (element*(time integration stage)).
        neighbor: 51300000 (connection*(time integration stage))s completed in 1.87009 s at 3.64539e-08 s / (connection*(time integration stage)).
        reconcile LDG flux: 5025000 (element*(time integration stage))s completed in 0.761522 s at 1.51547e-07 s / (element*(time integration stage)).
    fix admis.: 0 (element*(fix admis. iter))s completed in 5.26673 s.
        cartesian: 0 (element*iteration)s completed in 0 s.
            compute time step: 0 (element*iteration)s completed in 0 s.
            local: 0 (element*(time integration stage))s completed in 0 s.
            neighbor: 0 (connection*(time integration stage))s completed in 0 s.
            reconcile LDG flux: 0 (element*(time integration stage))s completed in 0 s.
        deformed: 0 (element*iteration)s completed in 0 s.
            compute time step: 0 (element*iteration)s completed in 0 s.
            local: 0 (element*(time integration stage))s completed in 0 s.
            neighbor: 0 (connection*(time integration stage))s completed in 0 s.
            reconcile LDG flux: 0 (element*(time integration stage))s completed in 0 s.
    initialize reference: 71475000 (element*iteration)s completed in 1.05156 s at 1.47123e-08 s / (element*iteration).
    prolong/restrict: 0 (element*(time integration stage))s completed in 4.51535 s.
    set art visc: 7147500 (element*iteration)s completed in 54.7568 s at 7.66097e-06 s / (element*iteration).
        advection: 7147500 (element*iteration)s completed in 20.6936 s at 2.89523e-06 s / (element*iteration).
            BCs: 171540000 (element*(time integration stage))s completed in 0.795846 s at 4.63942e-09 s / (element*(time integration stage)).
            cartesian: 79740000 (element*iteration)s completed in 10.5853 s at 1.32748e-07 s / (element*iteration).
                compute time step: 6645000 (element*iteration)s completed in 0.231821 s at 3.48865e-08 s / (element*iteration).
                local: 159480000 (element*(time integration stage))s completed in 6.13758 s at 3.84849e-08 s / (element*(time integration stage)).
                neighbor: 313740000 (connection*(time integration stage))s completed in 4.19688 s at 1.33769e-08 s / (connection*(time integration stage)).
            deformed: 6030000 (element*iteration)s completed in 2.33167 s at 3.86678e-07 s / (element*iteration).
                compute time step: 502500 (element*iteration)s completed in 0.0841519 s at 1.67467e-07 s / (element*iteration).
                local: 12060000 (element*(time integration stage))s completed in 1.12551 s at 9.33255e-08 s / (element*(time integration stage)).
                neighbor: 41040000 (connection*(time integration stage))s completed in 1.1036 s at 2.68909e-08 s / (connection*(time integration stage)).
            setup: 28590000 (element*iteration)s completed in 2.29555 s at 8.02921e-08 s / (element*iteration).
            update: 28590000 (element*(time integration stage))s completed in 2.24329 s at 7.84641e-08 s / (element*(time integration stage)).
        diffusion: 0 (element*iteration)s completed in 0 s.
            cartesian: 0 (element*iteration)s completed in 16.8998 s.
                compute time step: 6645000 (element*iteration)s completed in 0.16324 s at 2.45659e-08 s / (element*iteration).
                local: 199350000 (element*(time integration stage))s completed in 9.84472 s at 4.93841e-08 s / (element*(time integration stage)).
                neighbor: 784350000 (connection*(time integration stage))s completed in 2.77721 s at 3.54078e-09 s / (connection*(time integration stage)).
                reconcile LDG flux: 199350000 (element*(time integration stage))s completed in 4.06918 s at 2.04123e-08 s / (element*(time integration stage)).
            deformed: 0 (element*iteration)s completed in 4.41684 s.
                compute time step: 502500 (element*iteration)s completed in 0.0275342 s at 5.47945e-08 s / (element*iteration).
                local: 15075000 (element*(time integration stage))s completed in 1.90667 s at 1.26479e-07 s / (element*(time integration stage)).
                neighbor: 102600000 (connection*(time integration stage))s completed in 1.5299 s at 1.49113e-08 s / (connection*(time integration stage)).
                reconcile LDG flux: 15075000 (element*(time integration stage))s completed in 0.908002 s at 6.02323e-08 s / (element*(time integration stage)).
        initialize: 7147500 (element*iteration)s completed in 0.419046 s at 5.86283e-08 s / (element*iteration).
~~~
`simulation complete` tells you that the user-specified termination condition was met (in this case, a bound on `normalized_residual`; see \ref done).
Below, you will see the elapsed time for which the simulation was running as well as some data on the kernel performance.
Thus, you have completed a successful simulation.
See the other sample cases for examples of more complex usage.

*/
