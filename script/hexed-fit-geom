#! /usr/bin/python3
import numpy as np
import sys

"""
computes a smooth curve fit to discrete data points representing a 2D geometry.
useful when the resolution is poor and/or the precision of the points is low.
primarily designed for airfoils but may work for other smooth geometries.
"""

# configure command line arguments
args = sys.argv[1:]
fname = ""
uncluster_trailing = False
optimize = False
close_deform = False
close_segment = False
quiet = False
periodic = False
order = 10
n_interp = 1000
for arg in args:
    if ".geom" in arg:
        points = np.loadtxt(arg, skiprows=2)
        fname = arg
    elif ".txt" in arg:
        points = np.loadtxt(arg)
        fname = arg
    elif ".csv" in arg:
        points = np.loadtxt(arg, delimiter=",")
        fname = arg
    elif arg == "--uncluster-trailing":
        uncluster_trailing = True
    elif arg == "--optimize":
        optimize = True
    elif arg == "--close-deform":
        close_deform = True
    elif arg == "--close-segment":
        close_segment = True
    elif arg == "--quiet":
        quiet = True
    elif arg == "--periodic":
        periodic = True
    else:
        parts = arg.split("=")
        if parts[0] == "--order":
            order = int(parts[1])
        elif parts[0] == "--num-points":
            n_interp = int(parts[1])
        else:
            raise Exception(f"unrecognized argument `{arg}`")
assert fname, "must specify a file to process"

n_mode = order
if periodic:
    n_mode *= 2

# compute van der Monde matrix
def eval_mode(i_mode, param):
    if periodic:
        # Fourier series
        if i_mode%2:
            return np.cos((i_mode//2)*np.pi*param)
        else:
            return np.sin((i_mode//2)*np.pi*param)
    # Chebyshev polynomial
    return np.cos(i_mode*np.arccos(param))
def monde(param):
    n_point = param.size
    mat = np.zeros((n_point, n_mode))
    for i_mode in range(n_mode):
        for i_point in range(n_point):
            mat[i_point, i_mode] = eval_mode(i_mode, param[i_point])
    return mat

# alter distribution of data points to reduce overfitting at trailing edge if desired
if uncluster_trailing:
    param_in = np.cos(np.linspace(np.pi, 0, points.shape[0]))
else:
    param_in = np.linspace(-1, 1, points.shape[0])

# compute mode coefficients as a least squares fit to the data points
def soln(p):
    return np.linalg.lstsq(monde(p), points, rcond=None)

# optimize distribution of data points in parametric space if desired
if optimize:
    # optimization minimizes residual of curve fit
    def res(theta):
        return (soln(np.cos(theta))[1]).sum()
    from scipy.optimize import minimize
    min_result = minimize(res, np.arccos(param_in))
    if not quiet:
        print("optimization result:")
        print(min_result)
        print()
    param_in = np.cos(min_result.x)

# obtain final curve fit with whatever distribution of data points we have
s = soln(param_in)
coef = s[0]
if not quiet:
    print(f"curve fit residual: {s[1].sum()**.5}")
# sample at uniformly-spaced (in parameter space) interpolation points
param_out = np.linspace(-1, 1, n_interp)
interp = monde(param_out) @ coef

# plot results in parameter space
if not quiet:
    import matplotlib.pyplot as plt
    plt.scatter(param_in, points[:, 0], marker="+", label="x (data)")
    plt.scatter(param_in, points[:, 1], marker="+", label="y (data)")
    plt.plot(param_out, interp[:, 0], label="x (fit)")
    plt.plot(param_out, interp[:, 1], label="y (fit)")
    plt.legend()
    plt.title("curve fit in parametric space")
    plt.xlabel("parameter")
    plt.grid(True)
    plt.show()

# close geometry if desired
if close_deform:
    # close trailing edge by deforming geometry
    interp -= np.outer(param_out, (interp[-1, :] - interp[0, :])/2.)
if close_segment:
    # add an extra point at the end to match the first point
    interp = np.concatenate([interp, interp[[0], :]])
    n_interp += 1

# plot results in physical space
if not quiet:
    plt.scatter(points[:, 0], points[:, 1], marker="+", label="data")
    plt.plot(interp[:, 0], interp[:, 1], color="k", label="fit")
    plt.legend()
    plt.title("curve fit in physical space")
    plt.axis("equal")
    plt.grid(True)
    plt.show()

# write output file
np.savetxt(f"{'.'.join(fname.split('.')[:-1])}_fitted.csv", interp, delimiter = ",")
