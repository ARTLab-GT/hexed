
/*
This file was generated automatically by script/auto_generate.py.
Do not attempt to modify it directly. Instead, modify and rerun script/auto_generate.py
to make the required changes.
*/

#include <Gauss_lobatto.hpp>

double nodes2 [2] {
-1.0000000000000000000, 1.0000000000000000000, 
};

double weights2 [2] {
1.0000000000000000000, 1.0000000000000000000, 
};

double diff_mat2 [4] {
-0.50000000000000000000, -0.50000000000000000000, 
0.50000000000000000000, 0.50000000000000000000, 
};

double nodes3 [3] {
-1.0000000000000000000, 0.0, 1.0000000000000000000, 
};

double weights3 [3] {
0.33333333333333333333, 1.3333333333333333333, 0.33333333333333333333, 
};

double diff_mat3 [9] {
-1.5000000000000000000, -0.50000000000000000000, 0.50000000000000000000, 
2.0000000000000000000, 0.0, -2.0000000000000000000, 
-0.50000000000000000000, 0.50000000000000000000, 1.5000000000000000000, 
};

double nodes4 [4] {
-1.0000000000000000000, -0.44721359549995793928, 0.44721359549995793928, 1.0000000000000000000, 
};

double weights4 [4] {
0.16666666666666666667, 0.83333333333333333333, 0.83333333333333333333, 0.16666666666666666667, 
};

double diff_mat4 [16] {
-3.0000000000000000000, -0.80901699437494742410, 0.30901699437494742410, -0.50000000000000000000, 
4.0450849718747371205, 5.3455294201843912923E-51, -1.1180339887498948482, 1.5450849718747371205, 
-1.5450849718747371205, 1.1180339887498948482, -5.3455294201843912923E-51, -4.0450849718747371205, 
0.50000000000000000000, -0.30901699437494742410, 0.80901699437494742410, 3.0000000000000000000, 
};

double nodes5 [5] {
-1.0000000000000000000, -0.65465367070797714380, 0.0, 0.65465367070797714380, 1.0000000000000000000, 
};

double weights5 [5] {
0.10000000000000000000, 0.54444444444444444444, 0.71111111111111111111, 0.54444444444444444444, 0.10000000000000000000, 
};

double diff_mat5 [25] {
-5.0000000000000000000, -1.2409902530309828578, 0.37500000000000000000, -0.25900974696901714215, 0.50000000000000000000, 
6.7565024887242400038, 8.0182941302765869384E-51, -1.3365845776954533353, 0.76376261582597333443, -1.4101641779424266628, 
-2.6666666666666666667, 1.7457431218879390501, 0.0, -1.7457431218879390501, 2.6666666666666666667, 
1.4101641779424266628, -0.76376261582597333443, 1.3365845776954533353, -1.0691058840368782585E-50, -6.7565024887242400038, 
-0.50000000000000000000, 0.25900974696901714215, -0.37500000000000000000, 1.2409902530309828578, 5.0000000000000000000, 
};

double nodes6 [6] {
-1.0000000000000000000, -0.76505532392946469285, -0.28523151648064509631, 0.28523151648064509631, 0.76505532392946469285, 1.0000000000000000000, 
};

double weights6 [6] {
0.066666666666666666667, 0.37847495629784698032, 0.55485837703548635302, 0.55485837703548635302, 0.37847495629784698032, 0.066666666666666666667, 
};

double diff_mat6 [36] {
-7.5000000000000000000, -1.7863649483390948940, 0.48495104785356916931, -0.26970061083203897247, 0.23778117798423136381, -0.50000000000000000000, 
10.141415936319669280, 2.0045735325691467346E-50, -1.7212569528302333832, 0.78635667222324073744, -0.65354750742980016720, 1.3499133141904880992, 
-4.0361872703053480053, 2.5234267774294554319, 1.3363823550460978231E-51, -1.7529619663678659789, 1.1528281585359293413, -2.2446846481761668243, 
2.2446846481761668243, -1.1528281585359293413, 1.7529619663678659789, 2.6727647100921956461E-51, -2.5234267774294554319, 4.0361872703053480053, 
-1.3499133141904880992, 0.65354750742980016720, -0.78635667222324073744, 1.7212569528302333832, -2.1382117680737565169E-50, -10.141415936319669280, 
0.50000000000000000000, -0.23778117798423136381, 0.26970061083203897247, -0.48495104785356916931, 1.7863649483390948940, 7.5000000000000000000, 
};

double nodes7 [7] {
-1.0000000000000000000, -0.83022389627856692987, -0.46884879347071421380, 0.0, 0.46884879347071421380, 0.83022389627856692987, 1.0000000000000000000, 
};

double weights7 [7] {
0.047619047619047619048, 0.27682604736156594801, 0.43174538120986262342, 0.48761904761904761905, 0.43174538120986262342, 0.27682604736156594801, 0.047619047619047619048, 
};

double diff_mat7 [49] {
-10.500000000000000000, -2.4429260142442896126, 0.62525666551534211425, -0.31250000000000000000, 0.22609940094257465174, -0.22661187039544533517, 0.50000000000000000000, 
14.201576602919816167, 2.1382117680737565169E-50, -2.2158042831699713136, 0.90754447126882091882, -0.61639083551757952865, 0.60224717963578568467, -1.3173734357024344885, 
-5.6689852255455078786, 3.4558282142942851326, -5.3455294201843912923E-51, -2.0069692405887530896, 1.0664419040063746897, -0.96133979728871166671, 2.0499648130767427770, 
3.2000000000000000000, -1.5986066880983668372, 2.2666980870859990122, 2.6727647100921956461E-51, -2.2666980870859990122, 1.5986066880983668372, -3.2000000000000000000, 
-2.0499648130767427770, 0.96133979728871166671, -1.0664419040063746897, 2.0069692405887530896, 0.0, -3.4558282142942851326, 5.6689852255455078786, 
1.3173734357024344885, -0.60224717963578568467, 0.61639083551757952865, -0.90754447126882091882, 2.2158042831699713136, -2.1382117680737565169E-50, -14.201576602919816167, 
-0.50000000000000000000, 0.22661187039544533517, -0.22609940094257465174, 0.31250000000000000000, -0.62525666551534211425, 2.4429260142442896126, 10.500000000000000000, 
};

double nodes8 [8] {
-1.0000000000000000000, -0.87174014850960661534, -0.59170018143314230214, -0.20929921790247886877, 0.20929921790247886877, 0.59170018143314230214, 0.87174014850960661534, 1.0000000000000000000, 
};

double weights8 [8] {
0.035714285714285714286, 0.21070422714350603938, 0.34112269248350436476, 0.41245879465870388157, 0.41245879465870388157, 0.34112269248350436476, 0.21070422714350603938, 0.035714285714285714286, 
};

double diff_mat8 [64] {
-14.000000000000000000, -3.2099157030029903368, 0.79247668132051452680, -0.37215043572859486585, 0.24333071272379100971, -0.20328456890059274421, 0.21995751477130436303, -0.50000000000000000000, 
18.937598607117370513, -2.1382117680737565169E-50, -2.8064757947364334365, 1.0789446887904527025, -0.66115735090031122320, 0.53703958615766106094, -0.57356541494026413731, 1.2976873883202319824, 
-7.5692898193484870088, 4.5435850645665642174, 5.3455294201843912923E-51, -2.3781872335155058246, 1.1353580168811114405, -0.84502255650651048983, 0.86944809833149293416, -1.9416594255441223023, 
4.2979081642651752142, -2.1120612143145422284, 2.8755174059725052175, 6.6819117752304891154E-51, -2.3889243591582392149, 1.3727858318060284809, -1.2942320509135015077, 2.8101889892579490385, 
-2.8101889892579490385, 1.2942320509135015077, -1.3727858318060284809, 2.3889243591582392149, 2.6727647100921956461E-51, -2.8755174059725052175, 2.1120612143145422284, -4.2979081642651752142, 
1.9416594255441223023, -0.86944809833149293416, 0.84502255650651048983, -1.1353580168811114405, 2.3781872335155058246, -5.3455294201843912923E-51, -4.5435850645665642174, 7.5692898193484870088, 
-1.2976873883202319824, 0.57356541494026413731, -0.53703958615766106094, 0.66115735090031122320, -1.0789446887904527025, 2.8064757947364334365, 2.1382117680737565169E-50, -18.937598607117370513, 
0.50000000000000000000, -0.21995751477130436303, 0.20328456890059274421, -0.24333071272379100971, 0.37215043572859486585, -0.79247668132051452680, 3.2099157030029903368, 14.000000000000000000, 
};

double* nodes [7] {
&nodes2[0], &nodes3[0], &nodes4[0], &nodes5[0], &nodes6[0], &nodes7[0], &nodes8[0], 
};


double* weights [7] {
&weights2[0], &weights3[0], &weights4[0], &weights5[0], &weights6[0], &weights7[0], &weights8[0], 
};


double* diff_mats [7] {
&diff_mat2[0], &diff_mat3[0], &diff_mat4[0], &diff_mat5[0], &diff_mat6[0], &diff_mat7[0], &diff_mat8[0], 
};


double Gauss_lobatto::node(int i)
{
  if ((2 > rank) || (rank > 8))
  {
    throw "Not implemented for required rank.";
  }
  return nodes[rank - 2][i];
}

Eigen::VectorXd Gauss_lobatto::node_weights()
{
  if ((2 > rank) || (rank > 8))
  {
    throw "Not implemented for required rank.";
  }
  Eigen::VectorXd nw (rank);
  for (int i_node = 0; i_node < rank; ++i_node) nw(i_node) = weights[rank - 2][i_node];
  return nw;
}

Eigen::MatrixXd Gauss_lobatto::diff_mat()
{
  if ((2 > rank) || (rank > 8))
  {
    throw "Not implemented for required rank.";
  }
  Eigen::MatrixXd dm (rank, rank);
  for (int i_node = 0; i_node < rank*rank; ++i_node) dm(i_node) = diff_mats[rank - 2][i_node];
  return dm;
}

Gauss_lobatto::Gauss_lobatto(int rank_arg) : Basis(rank_arg) {}
